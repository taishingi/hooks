#!/usr/bin/bash

export TEXTDOMAIN="d-zuu"
export TEXTDOMAINDIR="/usr/share/locale"

source /usr/bin/gettext.sh

if [ -n "$GIT_DIR" ]
then
  unset GIT_DIR
fi

LINES=$(tput lines)
COLUMNS=$(tput cols)
OUTPUT_DIR=zuu
BADGES_DIR=badges
BADGES_STYLES=('plastic' 'flat' 'flatsquare' 'forthebadge' 'social')

LINT=false
TESTS=false
BUILD=false

SUCCESS=$(eval_gettext $'success')
FAILURE=$(eval_gettext $'failure')
LINT_SUCCESS_MSG=$(eval_gettext $'No errors detected')
LINT_FAILURE_MSG=$(eval_gettext $'Errors detected')
TESTS_SUCCESS_MSG=$(eval_gettext $'All tests passes')
TESTS_FAILURE_MSG=$(eval_gettext $'Your tests contains failures')
BUILD_SUCCESS_MSG=$(eval_gettext $'Your code can be build')
BUILD_FAILURE_MSG=$(eval_gettext $'Your code can\'t be build')
CHECK_SUCCESS_MSG=$(eval_gettext $'Your code can be committed')
CHECK_FAILURE_MSG=$(eval_gettext $'Your code can\'t be committed')
SHOW_OUTPUT_MSG=$(eval_gettext $'Show the output ?')
SHOW_QUIT_SCRIPT_MSG=$(eval_gettext $'Do you want quit the script now ?')
OPEN_GIT_TOOLS_MSG=$(eval_gettext $'Do you want launch git tools now ?')


SUCCESS_EXT="_${SUCCESS}.txt"
FAILURE_EXT="_${FAILURE}.txt"

LINT_SUCCESS="${OUTPUT_DIR}/lint${SUCCESS_EXT}"
LINT_FAILURE="${OUTPUT_DIR}/lint${FAILURE_EXT}"
TESTS_SUCCESS="${OUTPUT_DIR}/tests${SUCCESS_EXT}"
TESTS_FAILURE="${OUTPUT_DIR}/tests${FAILURE_EXT}"
BUILD_SUCCESS="${OUTPUT_DIR}/build${SUCCESS_EXT}"
BUILD_FAILURE="${OUTPUT_DIR}/build${FAILURE_EXT}"

if [ -z "$1" ]
then
    GENERATE_BADGE=false
elif [ "$1" == "badges" ]
then
    GENERATE_BADGE=true
else
    GENERATE_BADGE=false
fi
function output {
    tput clear
    local b=""
    for (( i = 0; i < (COLUMNS); i++ ))
    do
        b+="="
    done
    tput cuf 0
    printf "\n%s\n" "$b"
    printf "\n%*s\n" $(((${#1}+COLUMNS)/2)) "$1"
    tput cuf 0
    printf "\n%s\n" "$b"
    if [ "${SHOW_OUTPUT_AUTO}" == true ]
    then
      echo
      cat "$2"
      echo
    else
      echo
      read -r -s -t 5 -p "${SHOW_OUTPUT_MSG} [Y/n] : " continuous
      echo
      case "${continuous}" in
        y|""|Y)
          echo
          cat "$2"
          echo
          read -r -s -t 5 -p "${SHOW_QUIT_SCRIPT_MSG} [N/y] : " quit
          echo
          case "$quit" in
            ""|n|N)
              echo
            ;;
            y|Y)
              exit 1
            ;;
          esac
        ;;
      n|N)
         echo
        ;;
        *)
          exit 1
       ;;
      esac
  fi
}



function badge()
{
    if [ "${GENERATE_BADGE}" == true ]
    then
        for style in "${BADGES_STYLES[@]}"
        do
            rsbadges --style "${style}"  --label "${1}" --msg "${2}" --logo https://simpleicons.org/icons/rust.svg  --embed-logo --save-to-svg-at  "${BADGES_DIR}/${style}/${1}.svg" > /dev/null 2> /dev/null
        done
    fi
}

if [ ! -d ${OUTPUT_DIR} ]
then
    mkdir ${OUTPUT_DIR}
    touch "${OUTPUT_DIR}/.gitignore"
    echo "*.txt" > "${OUTPUT_DIR}/.gitignore"
fi

if [ ! -d "${BADGES_DIR}" ]
then
    mkdir "${BADGES_DIR}"
    for style in "${BADGES_STYLES[@]}"
    do
        mkdir "${BADGES_DIR}/${style}"
    done
fi

if ! dub lint --quiet > "${LINT_SUCCESS}" 2> "${LINT_FAILURE}"
then
    LINT=false
    badge "lint" "${FAILURE}"
else
    LINT=true
    badge "lint" "${SUCCESS}"
fi

if ! dub test --force --quiet > "${TESTS_SUCCESS}" 2> "${TESTS_FAILURE}"
then
    TESTS=false
    badge "test" "${FAILURE}"
else
    TESTS=true
    badge "test" "${SUCCESS}"
fi

if ! dub build --force --quiet > "${BUILD_SUCCESS}" 2> "${BUILD_FAILURE}"
then
    BUILD=false
    badge "build" "${FAILURE}"
else
    BUILD=true
    badge "build" "${SUCCESS}"
fi

if [ ${LINT} == true ]
then
    output "${LINT_SUCCESS_MSG}" "${LINT_SUCCESS}"
else
    output "${LINT_FAILURE_MSG}" "${LINT_FAILURE}"
fi

if [ ${TESTS} == true ]
then
    output "${TESTS_SUCCESS_MSG}"  "${TESTS_SUCCESS}"
else
    output "${TESTS_FAILURE_MSG}"  "${TESTS_FAILURE}"
fi


if [ ${BUILD} == true ]
then
    output "${BUILD_SUCCESS_MSG}" "${TESTS_SUCCESS}"
else
    output "${BUILD_FAILURE_MSG}" "${TESTS_FAILURE}"
fi


if [ ${LINT} == true ] && [ ${BUILD} == true ] && [ ${TESTS} == true ]
then
    tput clear
    {
      cat "${LINT_SUCCESS}"
      cat "${BUILD_SUCCESS}"
      cat "${TESTS_SUCCESS}"
    } > "zuu/zuu.txt"

    output "${CHECK_SUCCESS_MSG}" "zuu/zuu.txt"
    if [ -d ".git" ]
    then
      tput clear
      echo
      read -r -s -t 5 -p "${OPEN_GIT_TOOLS_MSG} [N/y] : " t
      case "${t}" in
      y|Y)
        lazygit
      ;;
      *)
        exit 0
      ;;
      esac
    fi
    exit 0
else
    tput clear
    {
      cat "${LINT_FAILURE}"
      cat "${BUILD_FAILURE}"
      cat "${TESTS_FAILURE}"
    } > "zuu/zuu.txt"
    output "${CHECK_FAILURE_MSG}" "zuu/zuu.txt"
    exit 1
fi
