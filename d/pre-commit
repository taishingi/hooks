#!/usr/bin/bash

export TEXTDOMAIN="d-zuu"
export TEXTDOMAINDIR="/usr/share/locale"

source /usr/bin/gettext.sh

if [ -n "$GIT_DIR" ]
then
  unset GIT_DIR
fi

LINES=$(tput lines)
COLUMNS=$(tput cols)
OUTPUT_DIR=zuu
BADGES_DIR=badges
BADGES_STYLES=('plastic' 'flat' 'flatsquare' 'forthebadge' 'social')

LINT=false
TESTS=false
BUILD=false


SUCCESS=$(eval_gettext $'success')
FAILURE=$(eval_gettext $'failure')

LINT_SUCCESS_MSG=$(gettext $'No errors detected')
LINT_FAILURE_MSG=$(eval_gettext $'Errors detected')
TESTS_SUCCESS_MSG=$(eval_gettext $'All tests passes')
TESTS_FAILURE_MSG=$(eval_gettext $'Your tests contains failures')
BUILD_SUCCESS_MSG=$(eval_gettext $'Your code can be build')
BUILD_FAILURE_MSG=$(eval_gettext $'Your code can\'t be build')
CHECK_SUCCESS_MSG=$(eval_gettext $'Your code can be committed')
CHECK_FAILURE_MSG=$(eval_gettext $'Your code can\'t be committed')



SUCCESS_EXT="_${SUCCESS}.txt"
FAILURE_EXT="_${FAILURE}.txt"

LINT_SUCCESS="${OUTPUT_DIR}/lint${SUCCESS_EXT}"
LINT_FAILURE="${OUTPUT_DIR}/lint${FAILURE_EXT}"
TESTS_SUCCESS="${OUTPUT_DIR}/tests${SUCCESS_EXT}"
TESTS_FAILURE="${OUTPUT_DIR}/tests${FAILURE_EXT}"
BUILD_SUCCESS="${OUTPUT_DIR}/build${SUCCESS_EXT}"
BUILD_FAILURE="${OUTPUT_DIR}/build${FAILURE_EXT}"

if [ -z "$1" ]
then
    GENERATE_BADGE=false
elif [ "$1" == "badges" ]
then
    GENERATE_BADGE=true
    SUCCESS_TIME=0
    FAILURE_TIME=0
else
    SUCCESS_TIME=$1
    FAILURE_TIME=$1
    GENERATE_BADGE=false
fi

function output {
    local text="$2"
    local b=""

    for (( i = 0; i < (COLUMNS); i++ ))
    do
        b+="="
    done
    tput cuf 0
    printf "\n%s\n" "$b"
    printf "\n%*s\n" $(((${#1}+COLUMNS)/2)) "$1"
    tput cuf 0
    printf "\n%s\n\n" "$b"
    cat "$3"
    printf "\n%*s\n" $(((${#text}+COLUMNS)/2)) "$text"
    read -r -s -t "$4"
}



function badge()
{
    if [ "${GENERATE_BADGE}" == true ]
    then
        for style in "${BADGES_STYLES[@]}"
        do
            rsbadges --style "${style}"  --label "${1}" --msg "${2}" --logo https://simpleicons.org/icons/rust.svg  --embed-logo --save-to-svg-at  "${BADGES_DIR}/${style}/${1}.svg" > /dev/null 2> /dev/null
        done
    fi
}

if [ ! -d ${OUTPUT_DIR} ]
then
    mkdir ${OUTPUT_DIR}
    touch "${OUTPUT_DIR}/.gitignore"
    echo "*.txt" > "${OUTPUT_DIR}/.gitignore"
fi

if [ ! -d "${BADGES_DIR}" ]
then
    mkdir "${BADGES_DIR}"
    for style in "${BADGES_STYLES[@]}"
    do
        mkdir "${BADGES_DIR}/${style}"
    done
fi

if ! dub lint --quiet > "${LINT_SUCCESS}" 2> "${LINT_FAILURE}"
then
    LINT=false
    badge "lint" "${FAILURE}"
else
    LINT=true
    badge "lint" "${SUCCESS}"
fi

if ! dub test --force --quiet > "${TESTS_SUCCESS}" 2> "${TESTS_FAILURE}"
then
    TESTS=false
    badge "test" "${FAILURE}"
else
    TESTS=true
    badge "test" "${SUCCESS}"
fi

if ! dub build --force --quiet > "${BUILD_SUCCESS}" 2> "${BUILD_FAILURE}"
then
    BUILD=false
    badge "build" "${FAILURE}"
else
    BUILD=true
    badge "build" "${SUCCESS}"
fi

clear

if [ ${LINT} == true ]
then
    output "${LINT_SUCCESS_MSG}" "waiting ${SUCCESS_TIME} secs" "${LINT_SUCCESS}" "${SUCCESS_TIME}"
else
    output "${LINT_FAILURE_MSG}" "waiting ${FAILURE_TIME} secs" "${LINT_FAILURE}" "${FAILURE_TIME}"
fi

if [ ${TESTS} == true ]
then
    output "${TESTS_SUCCESS_MSG}"  "${SUCCESS_TIME} secs" "${TESTS_SUCCESS}" "${SUCCESS_TIME}"
else
    output "${TESTS_FAILURE_MSG}" "${FAILURE_TIME} secs" "${TESTS_FAILURE}" "${FAILURE_TIME}"
fi


if [ ${BUILD} == true ]
then
    output "${BUILD_SUCCESS_MSG}"  "${SUCCESS_TIME} secs" "${TESTS_SUCCESS}" "${SUCCESS_TIME}"
else
    output "${BUILD_FAILURE_MSG}" "${FAILURE_TIME} secs" "${TESTS_FAILURE}" "${FAILURE_TIME}"
fi


if [ ${LINT} == true ] && [ ${BUILD} == true ] && [ ${TESTS} == true ]
then
    tput clear
    title="${CHECK_SUCCESS_MSG}"
    printf "\n%*s\n" $(((${#title}+COLUMNS)/2)) "$title"
    exit 0
else
    title="${CHECK_FAILURE_MSG}"
    printf "\n%*s\n" $(((${#title}+COLUMNS)/2)) "$title"
    exit 1
fi
