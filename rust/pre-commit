#!/usr/bin/bash

export TEXTDOMAIN="rust-zuu"
export TEXTDOMAINDIR="/usr/share/locale"

source /usr/bin/gettext.sh

if [ -n "$GIT_DIR" ]
then
  unset GIT_DIR
fi

LINES=$(tput lines)
COLUMNS=$(tput cols)
OUTPUT_DIR=zuu
BADGES_DIR=badges
BADGES_STYLES=('plastic' 'flat' 'flatsquare' 'forthebadge' 'social')

SUCCESS=$(eval_gettext $'success')
FAILURE=$(eval_gettext $'failure')

CLIPPY_SUCCESS_MSG=$(eval_gettext $'Your code is clean')
CLIPPY_FAILURE_MSG=$(eval_gettext $'Your code is not clean')

FORMAT_SUCCESS_MSG=$(eval_gettext $'Your code is formatted properly')
FORMAT_FAILURE_MSG=$(eval_gettext $'Your code is not formatted properly')

VERIFY_SUCCESS_MSG=$(eval_gettext $'Your project is valid')
VERIFY_FAILURE_MSG=$(eval_gettext $'Your project is not valid')

TESTS_SUCCESS_MSG=$(eval_gettext $'All  tests passes')
TESTS_FAILURE_MSG=$(eval_gettext $'Your tests contains failures')

CHECK_SUCCESS_MSG=$(eval_gettext $'Your code not contains errors')
CHECK_FAILURE_MSG=$(eval_gettext $'Your code contains errors')

AUDIT_SUCCESS_MSG=$(eval_gettext $'Your code can be share')
AUDIT_FAILURE_MSG=$(eval_gettext $'Your code contains warnings')

SUCCESS_MSG=$(eval_gettext $'Your code can be committed')
FAILURE_MSG=$(eval_gettext $'Your code can\'t be committed')
SHOW_OUTPUT_MSG=$(eval_gettext $'Show the output ?')
SHOW_QUIT_SCRIPT_MSG=$(eval_gettext $'Do you want quit the script now ?')
OPEN_GIT_TOOLS_MSG=$(eval_gettext $'Do you want launch git tools now ?')

FORMAT=false
VERIFY=false
AUDIT=false
CLIPPY=false
TESTS=false
CHECK=false
FAILURE_EXT="_failure.txt"
SUCCESS_EXT="_success.txt"

VERIFY_SUCCESS="${OUTPUT_DIR}/verify${SUCCESS_EXT}"
VERIFY_FAILURE="${OUTPUT_DIR}/verify${FAILURE_EXT}"
FORMAT_SUCCESS="${OUTPUT_DIR}/fmt${SUCCESS_EXT}"
FORMAT_FAILURE="${OUTPUT_DIR}/fmt${FAILURE_EXT}"
AUDIT_SUCCESS="${OUTPUT_DIR}/audit${SUCCESS_EXT}"
AUDIT_FAILURE="${OUTPUT_DIR}/audit${FAILURE_EXT}"
CLIPPY_SUCCESS="${OUTPUT_DIR}/clippy${SUCCESS_EXT}"
CLIPPY_FAILURE="${OUTPUT_DIR}/clippy${FAILURE_EXT}"
TESTS_SUCCESS="${OUTPUT_DIR}/tests${SUCCESS_EXT}"
TESTS_FAILURE="${OUTPUT_DIR}/tests${FAILURE_EXT}"
CHECK_SUCCESS="${OUTPUT_DIR}/check${SUCCESS_EXT}"
CHECK_FAILURE="${OUTPUT_DIR}/check${FAILURE_EXT}"

if [ -z "$1" ]
then
    GENERATE_BADGE=false
elif [ "$1" == "badges" ]
then
    GENERATE_BADGE=true
elif [ "$1" == "-y" ]
then
    SHOW_OUTPUT_AUTO=true
else
    SHOW_OUTPUT_AUTO=false
    GENERATE_BADGE=false
fi

function output {
    tput clear
    local b=""
    for (( i = 0; i < (COLUMNS); i++ ))
    do
        b+="="
    done
    tput cuf 0
    printf "\n%s\n" "$b"
    printf "\n%*s\n" $(((${#1}+COLUMNS)/2)) "$1"
    tput cuf 0
    printf "\n%s\n" "$b"
    if [ "${SHOW_OUTPUT_AUTO}" == true ]
    then
      echo
      cat "$2"
      echo
    else
      echo
      read -r -s -t 5 -p "${SHOW_OUTPUT_MSG} [Y/n] : " continuous
      echo
      case "${continuous}" in
        y|""|Y)
          echo
          cat "$2"
          echo
          read -r -s -t 5 -p "${SHOW_QUIT_SCRIPT_MSG} [N/y] : " quit
          echo
          case "$quit" in
            ""|n|N)
              echo
            ;;
            y|Y)
              exit 1
            ;;
          esac
        ;;
      n|N)
         echo
        ;;
        *)
          exit 1
       ;;
      esac
  fi
}



function badge()
{
    if [ "${GENERATE_BADGE}" == true ]
    then
        for style in "${BADGES_STYLES[@]}"
        do
            rsbadges --style "${style}"  --label "${1}" --msg "${2}" --logo https://simpleicons.org/icons/rust.svg  --embed-logo --save-to-svg-at  "${BADGES_DIR}/${style}/${1}.svg" > /dev/null 2> /dev/null
        done
    fi
}

if [ ! -d ${OUTPUT_DIR} ]
then
    mkdir ${OUTPUT_DIR}
    touch "${OUTPUT_DIR}/.gitignore"
    echo "*.txt" > "${OUTPUT_DIR}/.gitignore"
fi

if [ ! -d "${BADGES_DIR}" ]
then
    mkdir "${BADGES_DIR}"
    for style in "${BADGES_STYLES[@]}"
    do
        mkdir "${BADGES_DIR}/${style}"
    done
fi

if ! cargo verify-project --quiet  >  "${VERIFY_SUCCESS}" 2> "${VERIFY_FAILURE}"
then
    VERIFY=false
    badge "verify-project" "${FAILURE}"
else
    VERIFY=true
    badge "verify-project" "${SUCCESS}"
fi

if ! cargo fmt --check  > "${FORMAT_SUCCESS}"  2> "${FORMAT_FAILURE}"
then
    FORMAT=false
    badge "fmt" "${FAILURE}"
else
    FORMAT=true
    badge "fmt" "${SUCCESS}"
fi


if ! cargo audit --color=never  > "${AUDIT_SUCCESS}" 2> "${AUDIT_FAILURE}"
then
    AUDIT=false
    badge "audit" "${FAILURE}"
else
    AUDIT=true
    badge "audit" "${SUCCESS}"
fi

if ! cargo clippy -- -F keyword_idents -F warnings -F let-underscore -F rust-2018-compatibility -F rust-2018-idioms  -F rust-2021-compatibility -F future-incompatible -F unused -F unused_crate_dependencies -F unused_extern_crates  -D unused_macro_rules -F unused_results -F unused_qualifications -F nonstandard-style -F macro_use_extern_crate -F absolute_paths_not_starting_with_crate -F ambiguous_glob_imports -F clippy::all -F clippy::perf -F clippy::pedantic -F clippy::style -F clippy::suspicious -F clippy::correctness -F clippy::nursery -F clippy::complexity -F clippy::cargo > "${CLIPPY_SUCCESS}" 2> "${CLIPPY_FAILURE}"
then
    CLIPPY=false
    badge "clippy" "${FAILURE}"
else
    CLIPPY=true
    badge "clippy" "${SUCCESS}"
fi

if ! cargo test  > "${TESTS_SUCCESS}" 2> "${TESTS_FAILURE}"
then
    TESTS=false
    badge "test" "${FAILURE}"
else
    TESTS=true
    badge "test" "${SUCCESS}"
fi

if ! cargo check --quiet --all-targets  > "${CHECK_SUCCESS}" 2> "${CHECK_FAILURE}"
then
    CHECK=false
    badge "check" "${FAILURE}"
else
    CHECK=true
    badge "check" "${SUCCESS}"
fi

if [ ${VERIFY} == true ]
then
    output "${VERIFY_SUCCESS_MSG}" "${VERIFY_SUCCESS}"
else
    output "${VERIFY_FAILURE_MSG}" "${VERIFY_FAILURE}"
fi

if [ ${FORMAT} == true ]
then
    output "${FORMAT_SUCCESS_MSG}" "${FORMAT_SUCCESS}"
else
    output "${FORMAT_FAILURE_MSG}" "${FORMAT_FAILURE}"
fi

if [ ${AUDIT} == true ]
then
    output "${AUDIT_SUCCESS_MSG}" "${AUDIT_SUCCESS}"
else
    output "${AUDIT_FAILURE_MSG}" "${AUDIT_FAILURE}"
fi

if [ ${CLIPPY} == true ]
then
    output "${CLIPPY_SUCCESS_MSG}" "${CLIPPY_SUCCESS}"
else
    output "${CLIPPY_FAILURE_MSG}" "${CLIPPY_FAILURE}"
fi

if [ ${TESTS} == true ]
then
    output "${TESTS_SUCCESS_MSG}" "${TESTS_SUCCESS}"
else
    output "${TESTS_FAILURE_MSG}" "${TESTS_FAILURE}"
fi

if [ ${CHECK} == true ]
then
    output "${CHECK_SUCCESS_MSG}" "${CHECK_SUCCESS}"
else
    output "${CHECK_FAILURE_MSG}" "${CHECK_FAILURE}"
fi

if [ ${FORMAT} == true ] && [ ${VERIFY} == true ] && [ ${AUDIT} == true ] && [ ${CLIPPY} == true ]  && [ ${TESTS} == true ] && [ ${CHECK} == true ]
then
    tput clear
    {
      cat "${FORMAT_SUCCESS}"
      cat "${VERIFY_SUCCESS}"
      cat "${AUDIT_SUCCESS}"
      cat "${CLIPPY_SUCCESS}"
      cat "${TESTS_SUCCESS}"
      cat "${CHECK_SUCCESS}"
    } > "zuu/zuu.txt"

    output "${SUCCESS_MSG}" "zuu/zuu.txt"
    if [ -d ".git" ]
    then
      tput clear
      echo
      read -r -s -t 5 -p "${OPEN_GIT_TOOLS_MSG} [N/y] : " t
      case "${t}" in
      y|Y)
        lazygit
      ;;
      *)
        exit 0
      ;;
      esac
    fi
    exit 0
else
    {
      cat "${FORMAT_FAILURE}"
      cat "${VERIFY_FAILURE}"
      cat "${AUDIT_FAILURE}"
      cat "${CLIPPY_FAILURE}"
      cat "${TESTS_FAILURE}"
      cat "${CHECK_FAILURE}"
    } > "zuu/zuu.txt"
    tput clear
    output "${FAILURE_MSG}" "zuu/zuu.txt"
    exit 1
fi
